			Lab 3c
		---------------------	

1619  	Θεοδοσίου Κωνσταντίνος
1679	Τσώκος Φώτης



Lab 3c.1
----------

ia) 32bit CPU, sizeof(innerStruct) = 12 (1 byte char c1 + 3 align + 4 byte double *dptr + 1 byte char c2 + 3 align)
___________________________
|char a|  align|align|align|   0-3
----------------------------
|innerStruct table[0]      |   4-15
----------------------------
|innerStruct table[1]      |   16-27 
----------------------------
|int c                     |   28-31  
----------------------------
|bool   b|align|align|align|   32-35
----------------------------
|align|align|align|align   |   36-39   
----------------------------
|double d                  |   40-47
----------------------------
|short e | align |align    |   48-51
----------------------------
|float g                   |   52-55
----------------------------
|double g                  |   56-63
----------------------------
|char * cptr               |   64-67 
----------------------------
|void * vptr               |   68-71 
----------------------------
|int x                     |   72-75 
----------------------------
|align|align|align|align   |   76-79

Χρειαζόμαστε 80 bytes

ib)32bit CPU optimized
struct foo {
	double d;	
	double g;
	struct opt_innerStruct table[2]	
	int c;
	int x;
	float f;
	char *cptr;
	void *vptr;
	short e;
	char a;
	bool b;	
};

typedef struct{
	double *dptr;
	char c1;
	char c2;
}opt_innerStruct;

sizeof(opt_innerStruct)= 8(4 byte double *dptr + 2 byte char c1, c2 + 2 
byte align)
____________________________
|     double d     	   | 0-7   
----------------------------
|     double g             | 8-15 
----------------------------
|  opt_innerStruct table[0]| 16-23  
----------------------------
|  opt_innerStruct table[1]| 24-31 
----------------------------
|  int c                   | 32-35  
----------------------------
|  int x                   | 36-39 
----------------------------
|  float f                 | 40-43  
----------------------------
|  char * cptr             | 44-47 
----------------------------
|  void *vptr              | 48-51 
----------------------------
|  short e                 | 52-53  
----------------------------
|  char a                  | 54 
----------------------------
|  bool b                  | 55 
----------------------------
Χρειαζόμαστε 56 bytes

======================================================================
iia)64bit CPU, sizeof(innerStruct) = 24 (1 byte char c1 + 7 align + 8 
byte double *dptr + 1 byte char c2 + 7 align)

|char a|  align|align|align|   0-3
----------------------------
|align|align|align|align   |   4-7
----------------------------
|innerStruct table[0]      |   8-31
----------------------------
|innerStruct table[1]      |   32-55 
----------------------------
|int c                     |   56-59 
----------------------------
|bool   b|align|align|align|   60-63   
----------------------------
|double d                  |   64-71
----------------------------
|short e | align |align    |   72-75
----------------------------
|float g                   |   76-79
----------------------------
|double g                  |   80-87
----------------------------
|char * cptr               |   88-95 
----------------------------
|void * vptr               |   96-103 
----------------------------
|int x                     |   104-107
----------------------------
|align|align|align|align   |   108-111

Χρειαζόμαστε 112 bytes

iib)64bit CPU optimized
struct foo {
	struct opt_innerStruct table[2]	
	char *cptr;
	void *vptr;	
	double d;	
	double g;
	int c;
	int x;
	float f;
	short e;
	char a;
	bool b;	
};

typedef struct{
	double *dptr;
	char c1;
	char c2;
}opt_innerStruct;

sizeof(opt_innerStruct)= 16(8 byte double *dptr + 2 byte char c1, c2 + 6 
byte align)

____________________________
|  opt_innerStruct table[0]| 0-15  
----------------------------
|  opt_innerStruct table[1]| 16-31 
----------------------------
|  char * cptr             | 32-39 
----------------------------
|  void *vptr              | 40-47 
----------------------------
|     double d             | 48-55
----------------------------
|     double g             | 56-63
----------------------------
|  int c                   | 64-67
----------------------------
|  int x                   | 68-71 
----------------------------
|  float f                 | 72-75  
----------------------------
|  short e                 | 76-77  
----------------------------
|  char a                  | 78 
----------------------------
|  bool b                  | 79 
----------------------------
Χρειαζόμαστε 80 bytes

Η μνήμη της struct χρειάζεται να είναι aligned για να κερδίσει ο επεξεργαστής 
ταχύτητα στην αναζήτηση της. Αν ο επεξεργαστής ξέρει πχ ότι έχουμε alignment του 
struct foo κατά n bytes θα βρει αμέσως το πρώτο byte της(ψάχνοντας σε θέση που 
διαιρείται από n) και μετά το μόνο που θα  κάνει είναι να αρχίζει να διαβάζει τα επόμενα 
περιεχόμενα στις θέσεις μνήμης για sizeof(struct foo) bytes. Σε περίπτωση που η μνήμη δεν
 ήταν aligned ο επεξεργαστής (διαβάζοντας τη μνήμη ανά 4 bytes) θα έπρεπε να ψάξει σε 
ποιο 4-byte σύνολο βρίσκεται η αρχή της struct foo και ύστερα να ψάξει τα byte ένα ένα
μέχρι να βρει τη κανονική αρχή του struct.



